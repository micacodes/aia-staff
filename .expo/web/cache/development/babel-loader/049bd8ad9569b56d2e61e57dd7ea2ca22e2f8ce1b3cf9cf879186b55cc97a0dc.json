{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { countries } from \"../constants/countries\";\nexport default function getCountryByPhoneNumber(phoneNumber) {\n  var matchingCountries = [];\n  var formattedPhoneNumber = phoneNumber.replace(/\\s/g, '');\n  countries.forEach(function (item) {\n    if (formattedPhoneNumber.startsWith(item.callingCode.replace(/[\\s#]/g, ''))) {\n      matchingCountries.push(item);\n    }\n  });\n  var matchingCountry = matchingCountries[0];\n  if (matchingCountries.length > 1) {\n    matchingCountry = null;\n    var callingCode = matchingCountries[0].callingCode;\n    var _loop = function _loop(i) {\n      matchingCountries[i].phoneMasks.map(function (item) {\n        var areaCode = formattedPhoneNumber.substring(callingCode.length, item.replace(/\\D/g, '').length + callingCode.length);\n        if (areaCode && item.replace(/\\D/g, '') && areaCode === item.replace(/\\D/g, '')) {\n          if (matchingCountries[i].cca2 === 'CA' || matchingCountries[i].cca2 === 'US') {\n            matchingCountry = _objectSpread(_objectSpread({}, matchingCountries[i]), {}, {\n              phoneMasks: [item.replace(/\\d/g, '#').trim()]\n            });\n          } else {\n            matchingCountry = _objectSpread(_objectSpread({}, matchingCountries[i]), {}, {\n              phoneMasks: [item.replace(/[0-9]/g, '').trim()]\n            });\n          }\n        }\n      });\n    };\n    for (var i = 0; i < matchingCountries.length; i++) {\n      _loop(i);\n    }\n  }\n  if (matchingCountry) {\n    matchingCountry = {\n      name: matchingCountry.name,\n      cca2: matchingCountry.cca2,\n      flag: matchingCountry.flag,\n      callingCode: matchingCountry.callingCode\n    };\n  }\n  return matchingCountry;\n}","map":{"version":3,"names":["countries","getCountryByPhoneNumber","phoneNumber","matchingCountries","formattedPhoneNumber","replace","forEach","item","startsWith","callingCode","push","matchingCountry","length","_loop","i","phoneMasks","map","areaCode","substring","cca2","_objectSpread","trim","name","flag"],"sources":["/home/micah/Documents/aia-staff-osen-main/node_modules/react-native-international-phone-number/lib/utils/getCountryByPhoneNumber.js"],"sourcesContent":["import { countries } from '../constants/countries';\n\nexport default function getCountryByPhoneNumber(phoneNumber) {\n  const matchingCountries = [];\n  const formattedPhoneNumber = phoneNumber.replace(/\\s/g, '');\n\n  countries.forEach((item) => {\n    if (\n      formattedPhoneNumber.startsWith(\n        item.callingCode.replace(/[\\s#]/g, '')\n      )\n    ) {\n      matchingCountries.push(item);\n    }\n  });\n\n  let matchingCountry = matchingCountries[0];\n\n  if (matchingCountries.length > 1) {\n    matchingCountry = null;\n    const callingCode = matchingCountries[0].callingCode;\n\n    for (let i = 0; i < matchingCountries.length; i++) {\n      matchingCountries[i].phoneMasks.map((item) => {\n        const areaCode = formattedPhoneNumber.substring(\n          callingCode.length,\n          item.replace(/\\D/g, '').length + callingCode.length\n        );\n        if (\n          areaCode &&\n          item.replace(/\\D/g, '') &&\n          areaCode === item.replace(/\\D/g, '')\n        ) {\n          if (\n            matchingCountries[i].cca2 === 'CA' ||\n            matchingCountries[i].cca2 === 'US'\n          ) {\n            matchingCountry = {\n              ...matchingCountries[i],\n              phoneMasks: [item.replace(/\\d/g, '#').trim()],\n            };\n          } else {\n            matchingCountry = {\n              ...matchingCountries[i],\n              phoneMasks: [item.replace(/[0-9]/g, '').trim()],\n            };\n          }\n        }\n      });\n    }\n  }\n\n  if (matchingCountry) {\n    matchingCountry = {\n      name: matchingCountry.name,\n      cca2: matchingCountry.cca2,\n      flag: matchingCountry.flag,\n      callingCode: matchingCountry.callingCode,\n    };\n  }\n\n  return matchingCountry;\n}\n"],"mappings":";;;AAAA,SAASA,SAAS;AAElB,eAAe,SAASC,uBAAuBA,CAACC,WAAW,EAAE;EAC3D,IAAMC,iBAAiB,GAAG,EAAE;EAC5B,IAAMC,oBAAoB,GAAGF,WAAW,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAE3DL,SAAS,CAACM,OAAO,CAAC,UAACC,IAAI,EAAK;IAC1B,IACEH,oBAAoB,CAACI,UAAU,CAC7BD,IAAI,CAACE,WAAW,CAACJ,OAAO,CAAC,QAAQ,EAAE,EAAE,CACvC,CAAC,EACD;MACAF,iBAAiB,CAACO,IAAI,CAACH,IAAI,CAAC;IAC9B;EACF,CAAC,CAAC;EAEF,IAAII,eAAe,GAAGR,iBAAiB,CAAC,CAAC,CAAC;EAE1C,IAAIA,iBAAiB,CAACS,MAAM,GAAG,CAAC,EAAE;IAChCD,eAAe,GAAG,IAAI;IACtB,IAAMF,WAAW,GAAGN,iBAAiB,CAAC,CAAC,CAAC,CAACM,WAAW;IAAC,IAAAI,KAAA,YAAAA,MAAAC,CAAA,EAEF;MACjDX,iBAAiB,CAACW,CAAC,CAAC,CAACC,UAAU,CAACC,GAAG,CAAC,UAACT,IAAI,EAAK;QAC5C,IAAMU,QAAQ,GAAGb,oBAAoB,CAACc,SAAS,CAC7CT,WAAW,CAACG,MAAM,EAClBL,IAAI,CAACF,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACO,MAAM,GAAGH,WAAW,CAACG,MAC/C,CAAC;QACD,IACEK,QAAQ,IACRV,IAAI,CAACF,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,IACvBY,QAAQ,KAAKV,IAAI,CAACF,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EACpC;UACA,IACEF,iBAAiB,CAACW,CAAC,CAAC,CAACK,IAAI,KAAK,IAAI,IAClChB,iBAAiB,CAACW,CAAC,CAAC,CAACK,IAAI,KAAK,IAAI,EAClC;YACAR,eAAe,GAAAS,aAAA,CAAAA,aAAA,KACVjB,iBAAiB,CAACW,CAAC,CAAC;cACvBC,UAAU,EAAE,CAACR,IAAI,CAACF,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACgB,IAAI,CAAC,CAAC;YAAC,EAC9C;UACH,CAAC,MAAM;YACLV,eAAe,GAAAS,aAAA,CAAAA,aAAA,KACVjB,iBAAiB,CAACW,CAAC,CAAC;cACvBC,UAAU,EAAE,CAACR,IAAI,CAACF,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACgB,IAAI,CAAC,CAAC;YAAC,EAChD;UACH;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IA3BD,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,iBAAiB,CAACS,MAAM,EAAEE,CAAC,EAAE;MAAAD,KAAA,CAAAC,CAAA;IAAA;EA4BnD;EAEA,IAAIH,eAAe,EAAE;IACnBA,eAAe,GAAG;MAChBW,IAAI,EAAEX,eAAe,CAACW,IAAI;MAC1BH,IAAI,EAAER,eAAe,CAACQ,IAAI;MAC1BI,IAAI,EAAEZ,eAAe,CAACY,IAAI;MAC1Bd,WAAW,EAAEE,eAAe,CAACF;IAC/B,CAAC;EACH;EAEA,OAAOE,eAAe;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}