{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"theme\", \"language\", \"placeholder\", \"placeholderTextColor\", \"selectionColor\", \"phoneInputStyles\", \"modalStyles\", \"disabled\", \"modalDisabled\", \"modalHeight\", \"defaultCountry\", \"defaultValue\", \"onChangePhoneNumber\", \"selectedCountry\", \"onChangeSelectedCountry\", \"customMask\", \"showOnly\", \"excludedCountries\", \"popularCountries\", \"modalSearchInputPlaceholder\", \"modalSearchInputPlaceholderTextColor\", \"modalSearchInputSelectionColor\", \"modalNotFoundCountryMessage\", \"customCaret\"];\nvar _jsxFileName = \"/home/micah/Documents/aia-staff-osen-main/node_modules/react-native-international-phone-number/lib/index.js\",\n  _this = this;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect, useState, useRef, forwardRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { CountryPicker, CountryButton } from 'react-native-country-codes-picker';\nimport getInputMask from \"./utils/getInputMask\";\nimport getAllCountries from \"./utils/getAllCountries\";\nimport getCountriesByName from \"./utils/getCountriesByName\";\nimport getCountriesByCallingCode from \"./utils/getCountriesByCallingCode\";\nimport getCountryByCca2 from \"./utils/getCountryByCca2\";\nimport getCountryByPhoneNumber from \"./utils/getCountryByPhoneNumber\";\nimport { getCountryNotFoundMessage, getPhoneNumberInputPlaceholder, getSearchInputPlaceholder } from \"./utils/getPlaceholders\";\nimport { getCaretStyle, getContainerStyle, getCountryPickerStyle, getDividerStyle, getFlagContainerStyle, getFlagStyle, getFlagTextStyle, getInputStyle } from \"./utils/getStyles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar PhoneInput = forwardRef(function (_ref, ref) {\n  var _textInputRef$current, _textInputRef$current2;\n  var theme = _ref.theme,\n    language = _ref.language,\n    placeholder = _ref.placeholder,\n    placeholderTextColor = _ref.placeholderTextColor,\n    selectionColor = _ref.selectionColor,\n    phoneInputStyles = _ref.phoneInputStyles,\n    modalStyles = _ref.modalStyles,\n    disabled = _ref.disabled,\n    modalDisabled = _ref.modalDisabled,\n    modalHeight = _ref.modalHeight,\n    defaultCountry = _ref.defaultCountry,\n    defaultValue = _ref.defaultValue,\n    onChangePhoneNumber = _ref.onChangePhoneNumber,\n    selectedCountry = _ref.selectedCountry,\n    onChangeSelectedCountry = _ref.onChangeSelectedCountry,\n    customMask = _ref.customMask,\n    showOnly = _ref.showOnly,\n    excludedCountries = _ref.excludedCountries,\n    popularCountries = _ref.popularCountries,\n    modalSearchInputPlaceholder = _ref.modalSearchInputPlaceholder,\n    modalSearchInputPlaceholderTextColor = _ref.modalSearchInputPlaceholderTextColor,\n    modalSearchInputSelectionColor = _ref.modalSearchInputSelectionColor,\n    modalNotFoundCountryMessage = _ref.modalNotFoundCountryMessage,\n    customCaret = _ref.customCaret,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    show = _useState2[0],\n    setShow = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    defaultCca2 = _useState4[0],\n    setDefaultCca2 = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    inputValue = _useState6[0],\n    setInputValue = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    countryValue = _useState8[0],\n    setCountryValue = _useState8[1];\n  var textInputRef = useRef(null);\n  var refBase = _objectSpread(_objectSpread({}, textInputRef.current), {}, {\n    onFocus: (_textInputRef$current = textInputRef.current) == null ? void 0 : _textInputRef$current.focus,\n    focus: (_textInputRef$current2 = textInputRef.current) == null ? void 0 : _textInputRef$current2.focus,\n    getValue: function getValue() {\n      return inputValue;\n    },\n    value: inputValue,\n    getFullPhoneNumber: function getFullPhoneNumber() {\n      return `${countryValue == null ? void 0 : countryValue.callingCode} ${inputValue}`;\n    },\n    fullPhoneNumber: `${countryValue == null ? void 0 : countryValue.callingCode} ${inputValue}`,\n    getSelectedCountry: function getSelectedCountry() {\n      return countryValue;\n    },\n    selectedCountry: countryValue,\n    props: _objectSpread({\n      theme: theme,\n      language: language,\n      placeholder: placeholder,\n      placeholderTextColor: placeholderTextColor,\n      selectionColor: selectionColor,\n      phoneInputStyles: phoneInputStyles,\n      modalStyles: modalStyles,\n      disabled: disabled,\n      modalDisabled: modalDisabled,\n      modalHeight: modalHeight,\n      defaultCountry: defaultCountry,\n      defaultValue: defaultValue,\n      onChangePhoneNumber: onChangePhoneNumber,\n      selectedCountry: selectedCountry,\n      onChangeSelectedCountry: onChangeSelectedCountry,\n      customMask: customMask,\n      showOnly: showOnly,\n      excludedCountries: excludedCountries,\n      popularCountries: popularCountries,\n      modalSearchInputPlaceholder: modalSearchInputPlaceholder,\n      modalSearchInputPlaceholderTextColor: modalSearchInputPlaceholderTextColor,\n      modalSearchInputSelectionColor: modalSearchInputSelectionColor,\n      modalNotFoundCountryMessage: modalNotFoundCountryMessage,\n      customCaret: customCaret\n    }, rest)\n  });\n  function updateRef(phoneNumber, country) {\n    if (ref) {\n      ref.current = _objectSpread(_objectSpread({}, refBase), {}, {\n        getValue: function getValue() {\n          return phoneNumber;\n        },\n        value: phoneNumber,\n        getFullPhoneNumber: function getFullPhoneNumber() {\n          return `${country == null ? void 0 : country.callingCode} ${phoneNumber}`;\n        },\n        fullPhoneNumber: `${country == null ? void 0 : country.callingCode} ${phoneNumber}`,\n        getSelectedCountry: function getSelectedCountry() {\n          return country;\n        },\n        selectedCountry: country,\n        props: _objectSpread(_objectSpread({}, refBase.props), {}, {\n          value: phoneNumber,\n          selectedCountry: country\n        })\n      });\n    }\n  }\n  function onSelect(country) {\n    setShow(false);\n    if (ref) {\n      setInputValue('');\n    } else {\n      onChangePhoneNumber('');\n    }\n    if (onChangeSelectedCountry || ref) {\n      var newValue = {\n        name: country.name,\n        cca2: country.code,\n        flag: country.flag,\n        callingCode: country.dial_code\n      };\n      if (ref) {\n        setCountryValue(newValue);\n        updateRef('', newValue);\n      } else {\n        onChangeSelectedCountry(newValue);\n      }\n    }\n  }\n  function onChangeText(phoneNumber, callingCode) {\n    if (phoneNumber.includes('+')) {\n      var matchingCountry = getCountryByPhoneNumber(phoneNumber);\n      if (matchingCountry) {\n        setDefaultCca2(matchingCountry.cca2);\n        if (ref) {\n          setCountryValue(matchingCountry);\n          updateRef('', matchingCountry);\n        } else {\n          onChangeSelectedCountry(matchingCountry);\n        }\n        onChangeText(phoneNumber.replace(matchingCountry.callingCode, ''), null);\n      }\n      return;\n    }\n    var res = getInputMask(phoneNumber, callingCode ? callingCode : countryValue == null ? void 0 : countryValue.callingCode, countryValue == null ? void 0 : countryValue.cca2, customMask ? customMask : null);\n    if (ref) {\n      setInputValue(res);\n      updateRef(res, countryValue);\n    } else {\n      onChangePhoneNumber(res);\n    }\n  }\n  useEffect(function () {\n    if (!countryValue && !defaultCountry) {\n      var _defaultCountry = getCountryByCca2('BR');\n      if (ref) {\n        setCountryValue(_defaultCountry);\n        updateRef('', _defaultCountry);\n      } else {\n        onChangeSelectedCountry(_defaultCountry);\n      }\n    } else {\n      if (ref) {\n        updateRef('', countryValue);\n      }\n    }\n  }, []);\n  useEffect(function () {\n    if (defaultCountry) {\n      if (ref) {\n        setCountryValue(getCountryByCca2(defaultCountry));\n        updateRef('', getCountryByCca2(defaultCountry));\n      } else {\n        onChangeSelectedCountry(getCountryByCca2(defaultCountry));\n      }\n    }\n  }, [defaultCountry]);\n  useEffect(function () {\n    if (ref) {\n      setInputValue('');\n    } else {\n      onChangePhoneNumber('');\n    }\n    if (defaultValue) {\n      var matchingCountry = getCountryByPhoneNumber(defaultValue);\n      if (matchingCountry) {\n        setDefaultCca2(matchingCountry.cca2);\n        if (ref) {\n          setCountryValue(matchingCountry);\n          updateRef('', matchingCountry);\n        } else {\n          onChangeSelectedCountry(matchingCountry);\n        }\n      } else {\n        setDefaultCca2(null);\n        if (ref) {\n          setCountryValue(null);\n          updateRef('', null);\n        } else {\n          onChangeSelectedCountry(null);\n        }\n        onChangeText('', null);\n        console.warn(\"The default number provided (defaultValue) don't match with anyone country. Please, correct it to be shown in the input. For more information: https://github.com/AstrOOnauta/react-native-international-phone-number#intermediate-usage---typescript--default-phone-number-value\");\n      }\n    }\n  }, [defaultValue]);\n  useEffect(function () {\n    if (defaultValue && countryValue && countryValue.cca2 === defaultCca2 && !inputValue) {\n      var callingCode = countryValue.callingCode;\n      var phoneNumber = defaultValue;\n      if (callingCode === '+1' && countryValue.cca2 !== 'CA' && countryValue.cca2 !== 'US') {\n        phoneNumber = defaultValue.replace(/\\s/g, '').substring(callingCode.length + 3, defaultValue.replace(/\\D/g, '').length + callingCode.length);\n      } else {\n        phoneNumber = defaultValue.replace(/\\s/g, '').substring(callingCode.length, defaultValue.replace(/\\D/g, '').length + callingCode.length);\n      }\n      onChangeText(phoneNumber, callingCode);\n    }\n  }, [countryValue]);\n  useEffect(function () {\n    if (!ref) {\n      setInputValue(rest.value);\n      setCountryValue(selectedCountry);\n    }\n  }, [selectedCountry]);\n  if (ref && (rest.value || onChangePhoneNumber || selectedCountry || onChangeSelectedCountry)) {\n    throw new Error(\"Error: Don't use the useRef hook combined with the useState hook to manage the phoneNumber and selectedCountry values. Instead, choose to use just one of them (useRef or useState).\");\n  } else {\n    return _jsxDEV(_Fragment, {\n      children: [_jsxDEV(View, {\n        style: getContainerStyle(theme, phoneInputStyles == null ? void 0 : phoneInputStyles.container, disabled),\n        children: [_jsxDEV(TouchableOpacity, {\n          activeOpacity: disabled || modalDisabled ? 1 : 0.6,\n          onPress: function onPress() {\n            return disabled || modalDisabled ? null : setShow(true);\n          },\n          style: getFlagContainerStyle(theme, phoneInputStyles == null ? void 0 : phoneInputStyles.flagContainer),\n          children: [_jsxDEV(Text, {\n            style: getFlagStyle(phoneInputStyles == null ? void 0 : phoneInputStyles.flag),\n            children: countryValue == null ? void 0 : countryValue.flag\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 15\n          }, _this), customCaret || _jsxDEV(View, {\n            style: phoneInputStyles == null ? void 0 : phoneInputStyles.caret,\n            children: _jsxDEV(View, {\n              style: {\n                flexDirection: 'row',\n                justifyContent: 'center',\n                paddingTop: 4\n              },\n              children: _jsxDEV(View, {\n                style: getCaretStyle(theme, phoneInputStyles == null ? void 0 : phoneInputStyles.caret)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 21\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 19\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 17\n          }, _this), _jsxDEV(View, {\n            style: getDividerStyle(theme, phoneInputStyles == null ? void 0 : phoneInputStyles.divider)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 15\n          }, _this), _jsxDEV(Text, {\n            style: getFlagTextStyle(theme, phoneInputStyles == null ? void 0 : phoneInputStyles.callingCode),\n            children: countryValue == null ? void 0 : countryValue.callingCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, _this), _jsxDEV(TextInput, _objectSpread({\n          style: getInputStyle(theme, phoneInputStyles == null ? void 0 : phoneInputStyles.input),\n          placeholder: placeholder === '' || placeholder ? placeholder : getPhoneNumberInputPlaceholder(language || 'en'),\n          placeholderTextColor: placeholderTextColor || (theme === 'dark' ? '#CCCCCC' : '#AAAAAA'),\n          selectionColor: selectionColor || (theme === 'dark' ? 'rgba(255,255,255, .4)' : 'rgba(0 ,0 ,0 , .4)'),\n          editable: !disabled,\n          value: inputValue,\n          onChangeText: onChangeText,\n          keyboardType: \"numeric\",\n          ref: textInputRef\n        }, rest), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, _this), !disabled && !modalDisabled && show ? _jsxDEV(CountryPicker, {\n        show: show,\n        lang: language,\n        inputPlaceholder: modalSearchInputPlaceholder || getSearchInputPlaceholder(language || 'en'),\n        inputPlaceholderTextColor: modalSearchInputPlaceholderTextColor || (theme === 'dark' ? '#CCCCCC' : '#AAAAAA'),\n        selectionColor: modalSearchInputSelectionColor || (theme === 'dark' ? 'rgba(255,255,255, .4)' : 'rgba(0 ,0 ,0 , .4)'),\n        searchMessage: modalNotFoundCountryMessage || getCountryNotFoundMessage(language || 'en'),\n        enableModalAvoiding: true,\n        style: getCountryPickerStyle(theme, modalHeight, modalStyles),\n        pickerButtonOnPress: onSelect,\n        onBackdropPress: function onBackdropPress() {\n          return setShow(false);\n        },\n        showOnly: showOnly,\n        excludedCountries: excludedCountries,\n        popularCountries: popularCountries,\n        ListHeaderComponent: function ListHeaderComponent(_ref2) {\n          var countries = _ref2.countries,\n            lang = _ref2.lang,\n            _onPress = _ref2.onPress;\n          return countries.map(function (country, index) {\n            var _country$name;\n            return _jsxDEV(CountryButton, {\n              item: country,\n              name: country == null ? void 0 : (_country$name = country.name) == null ? void 0 : _country$name[lang || 'en'],\n              onPress: function onPress() {\n                return _onPress(country);\n              },\n              style: getCountryPickerStyle(theme, modalHeight, modalStyles)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 21\n            }, _this);\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 13\n      }, _this) : null]\n    }, void 0, true);\n  }\n});\nexport default PhoneInput;\nexport { getAllCountries, getCountryByPhoneNumber, getCountryByCca2, getCountriesByCallingCode, getCountriesByName };","map":{"version":3,"names":["React","useEffect","useState","useRef","forwardRef","View","Text","TouchableOpacity","TextInput","CountryPicker","CountryButton","getInputMask","getAllCountries","getCountriesByName","getCountriesByCallingCode","getCountryByCca2","getCountryByPhoneNumber","getCountryNotFoundMessage","getPhoneNumberInputPlaceholder","getSearchInputPlaceholder","getCaretStyle","getContainerStyle","getCountryPickerStyle","getDividerStyle","getFlagContainerStyle","getFlagStyle","getFlagTextStyle","getInputStyle","jsxDEV","_jsxDEV","Fragment","_Fragment","PhoneInput","_ref","ref","_textInputRef$current","_textInputRef$current2","theme","language","placeholder","placeholderTextColor","selectionColor","phoneInputStyles","modalStyles","disabled","modalDisabled","modalHeight","defaultCountry","defaultValue","onChangePhoneNumber","selectedCountry","onChangeSelectedCountry","customMask","showOnly","excludedCountries","popularCountries","modalSearchInputPlaceholder","modalSearchInputPlaceholderTextColor","modalSearchInputSelectionColor","modalNotFoundCountryMessage","customCaret","rest","_objectWithoutProperties","_excluded","_useState","_useState2","_slicedToArray","show","setShow","_useState3","_useState4","defaultCca2","setDefaultCca2","_useState5","_useState6","inputValue","setInputValue","_useState7","_useState8","countryValue","setCountryValue","textInputRef","refBase","_objectSpread","current","onFocus","focus","getValue","value","getFullPhoneNumber","callingCode","fullPhoneNumber","getSelectedCountry","props","updateRef","phoneNumber","country","onSelect","newValue","name","cca2","code","flag","dial_code","onChangeText","includes","matchingCountry","replace","res","console","warn","substring","length","Error","children","style","container","activeOpacity","onPress","flagContainer","fileName","_jsxFileName","lineNumber","columnNumber","_this","caret","flexDirection","justifyContent","paddingTop","divider","input","editable","keyboardType","lang","inputPlaceholder","inputPlaceholderTextColor","searchMessage","enableModalAvoiding","pickerButtonOnPress","onBackdropPress","ListHeaderComponent","_ref2","countries","map","index","_country$name","item"],"sources":["/home/micah/Documents/aia-staff-osen-main/node_modules/react-native-international-phone-number/lib/index.js"],"sourcesContent":["import React, {\n  useEffect,\n  useState,\n  useRef,\n  forwardRef,\n} from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  TextInput,\n} from 'react-native';\nimport {\n  CountryPicker,\n  CountryButton,\n} from 'react-native-country-codes-picker';\n\nimport getInputMask from './utils/getInputMask';\nimport getAllCountries from './utils/getAllCountries';\nimport getCountriesByName from './utils/getCountriesByName';\nimport getCountriesByCallingCode from './utils/getCountriesByCallingCode';\nimport getCountryByCca2 from './utils/getCountryByCca2';\nimport getCountryByPhoneNumber from './utils/getCountryByPhoneNumber';\nimport {\n  getCountryNotFoundMessage,\n  getPhoneNumberInputPlaceholder,\n  getSearchInputPlaceholder,\n} from './utils/getPlaceholders';\nimport {\n  getCaretStyle,\n  getContainerStyle,\n  getCountryPickerStyle,\n  getDividerStyle,\n  getFlagContainerStyle,\n  getFlagStyle,\n  getFlagTextStyle,\n  getInputStyle,\n} from './utils/getStyles';\n\nconst PhoneInput = forwardRef(\n  (\n    {\n      theme,\n      language,\n      placeholder,\n      placeholderTextColor,\n      selectionColor,\n      phoneInputStyles,\n      modalStyles,\n      disabled,\n      modalDisabled,\n      modalHeight,\n      defaultCountry,\n      defaultValue,\n      onChangePhoneNumber,\n      selectedCountry,\n      onChangeSelectedCountry,\n      customMask,\n      showOnly,\n      excludedCountries,\n      popularCountries,\n      modalSearchInputPlaceholder,\n      modalSearchInputPlaceholderTextColor,\n      modalSearchInputSelectionColor,\n      modalNotFoundCountryMessage,\n      customCaret,\n      ...rest\n    },\n    ref\n  ) => {\n    const [show, setShow] = useState(false);\n    const [defaultCca2, setDefaultCca2] = useState('');\n    const [inputValue, setInputValue] = useState(null);\n    const [countryValue, setCountryValue] = useState(null);\n\n    const textInputRef = useRef(null);\n\n    const refBase = {\n      ...textInputRef.current,\n      onFocus: textInputRef.current?.focus,\n      focus: textInputRef.current?.focus,\n      getValue: () => inputValue,\n      value: inputValue,\n      getFullPhoneNumber: () =>\n        `${countryValue?.callingCode} ${inputValue}`,\n      fullPhoneNumber: `${countryValue?.callingCode} ${inputValue}`,\n      getSelectedCountry: () => countryValue,\n      selectedCountry: countryValue,\n      props: {\n        theme,\n        language,\n        placeholder,\n        placeholderTextColor,\n        selectionColor,\n        phoneInputStyles,\n        modalStyles,\n        disabled,\n        modalDisabled,\n        modalHeight,\n        defaultCountry,\n        defaultValue,\n        onChangePhoneNumber,\n        selectedCountry,\n        onChangeSelectedCountry,\n        customMask,\n        showOnly,\n        excludedCountries,\n        popularCountries,\n        modalSearchInputPlaceholder,\n        modalSearchInputPlaceholderTextColor,\n        modalSearchInputSelectionColor,\n        modalNotFoundCountryMessage,\n        customCaret,\n        ...rest,\n      },\n    };\n\n    function updateRef(phoneNumber, country) {\n      if (ref) {\n        ref.current = {\n          ...refBase,\n          getValue: () => phoneNumber,\n          value: phoneNumber,\n          getFullPhoneNumber: () =>\n            `${country?.callingCode} ${phoneNumber}`,\n          fullPhoneNumber: `${country?.callingCode} ${phoneNumber}`,\n          getSelectedCountry: () => country,\n          selectedCountry: country,\n          props: {\n            ...refBase.props,\n            value: phoneNumber,\n            selectedCountry: country,\n          },\n        };\n      }\n    }\n\n    function onSelect(country) {\n      setShow(false);\n\n      if (ref) {\n        setInputValue('');\n      } else {\n        onChangePhoneNumber('');\n      }\n\n      if (onChangeSelectedCountry || ref) {\n        const newValue = {\n          name: country.name,\n          cca2: country.code,\n          flag: country.flag,\n          callingCode: country.dial_code,\n        };\n\n        if (ref) {\n          setCountryValue(newValue);\n          updateRef('', newValue);\n        } else {\n          onChangeSelectedCountry(newValue);\n        }\n      }\n    }\n\n    function onChangeText(phoneNumber, callingCode) {\n      if (phoneNumber.includes('+')) {\n        const matchingCountry = getCountryByPhoneNumber(phoneNumber);\n\n        if (matchingCountry) {\n          setDefaultCca2(matchingCountry.cca2);\n\n          if (ref) {\n            setCountryValue(matchingCountry);\n            updateRef('', matchingCountry);\n          } else {\n            onChangeSelectedCountry(matchingCountry);\n          }\n\n          onChangeText(\n            phoneNumber.replace(matchingCountry.callingCode, ''),\n            null\n          );\n        }\n\n        return;\n      }\n\n      const res = getInputMask(\n        phoneNumber,\n        callingCode ? callingCode : countryValue?.callingCode,\n        countryValue?.cca2,\n        customMask ? customMask : null\n      );\n\n      if (ref) {\n        setInputValue(res);\n        updateRef(res, countryValue);\n      } else {\n        onChangePhoneNumber(res);\n      }\n    }\n\n    useEffect(() => {\n      if (!countryValue && !defaultCountry) {\n        const defaultCountry = getCountryByCca2('BR');\n\n        if (ref) {\n          setCountryValue(defaultCountry);\n          updateRef('', defaultCountry);\n        } else {\n          onChangeSelectedCountry(defaultCountry);\n        }\n      } else {\n        if (ref) {\n          updateRef('', countryValue);\n        }\n      }\n    }, []);\n\n    useEffect(() => {\n      if (defaultCountry) {\n        if (ref) {\n          setCountryValue(getCountryByCca2(defaultCountry));\n          updateRef('', getCountryByCca2(defaultCountry));\n        } else {\n          onChangeSelectedCountry(getCountryByCca2(defaultCountry));\n        }\n      }\n    }, [defaultCountry]);\n\n    useEffect(() => {\n      if (ref) {\n        setInputValue('');\n      } else {\n        onChangePhoneNumber('');\n      }\n\n      if (defaultValue) {\n        const matchingCountry = getCountryByPhoneNumber(defaultValue);\n\n        if (matchingCountry) {\n          setDefaultCca2(matchingCountry.cca2);\n\n          if (ref) {\n            setCountryValue(matchingCountry);\n            updateRef('', matchingCountry);\n          } else {\n            onChangeSelectedCountry(matchingCountry);\n          }\n        } else {\n          setDefaultCca2(null);\n\n          if (ref) {\n            setCountryValue(null);\n            updateRef('', null);\n          } else {\n            onChangeSelectedCountry(null);\n          }\n\n          onChangeText('', null);\n\n          console.warn(\n            \"The default number provided (defaultValue) don't match with anyone country. Please, correct it to be shown in the input. For more information: https://github.com/AstrOOnauta/react-native-international-phone-number#intermediate-usage---typescript--default-phone-number-value\"\n          );\n        }\n      }\n    }, [defaultValue]);\n\n    useEffect(() => {\n      if (\n        defaultValue &&\n        countryValue &&\n        countryValue.cca2 === defaultCca2 &&\n        !inputValue\n      ) {\n        const callingCode = countryValue.callingCode;\n\n        let phoneNumber = defaultValue;\n\n        if (\n          callingCode === '+1' &&\n          countryValue.cca2 !== 'CA' &&\n          countryValue.cca2 !== 'US'\n        ) {\n          phoneNumber = defaultValue\n            .replace(/\\s/g, '')\n            .substring(\n              callingCode.length + 3,\n              defaultValue.replace(/\\D/g, '').length +\n                callingCode.length\n            );\n        } else {\n          phoneNumber = defaultValue\n            .replace(/\\s/g, '')\n            .substring(\n              callingCode.length,\n              defaultValue.replace(/\\D/g, '').length +\n                callingCode.length\n            );\n        }\n        onChangeText(phoneNumber, callingCode);\n      }\n    }, [countryValue]);\n\n    useEffect(() => {\n      if (!ref) {\n        setInputValue(rest.value);\n        setCountryValue(selectedCountry);\n      }\n    }, [selectedCountry]);\n\n    if (\n      ref &&\n      (rest.value ||\n        onChangePhoneNumber ||\n        selectedCountry ||\n        onChangeSelectedCountry)\n    ) {\n      throw new Error(\n        \"Error: Don't use the useRef hook combined with the useState hook to manage the phoneNumber and selectedCountry values. Instead, choose to use just one of them (useRef or useState).\"\n      );\n    } else {\n      return (\n        <>\n          <View\n            style={getContainerStyle(\n              theme,\n              phoneInputStyles?.container,\n              disabled\n            )}\n          >\n            <TouchableOpacity\n              activeOpacity={disabled || modalDisabled ? 1 : 0.6}\n              onPress={() =>\n                disabled || modalDisabled ? null : setShow(true)\n              }\n              style={getFlagContainerStyle(\n                theme,\n                phoneInputStyles?.flagContainer\n              )}\n            >\n              <Text style={getFlagStyle(phoneInputStyles?.flag)}>\n                {countryValue?.flag}\n              </Text>\n              {customCaret || (\n                <View style={phoneInputStyles?.caret}>\n                  <View\n                    style={{\n                      flexDirection: 'row',\n                      justifyContent: 'center',\n                      paddingTop: 4,\n                    }}\n                  >\n                    <View\n                      style={getCaretStyle(\n                        theme,\n                        phoneInputStyles?.caret\n                      )}\n                    />\n                  </View>\n                </View>\n              )}\n              <View\n                style={getDividerStyle(\n                  theme,\n                  phoneInputStyles?.divider\n                )}\n              />\n              <Text\n                style={getFlagTextStyle(\n                  theme,\n                  phoneInputStyles?.callingCode\n                )}\n              >\n                {countryValue?.callingCode}\n              </Text>\n            </TouchableOpacity>\n            <TextInput\n              style={getInputStyle(theme, phoneInputStyles?.input)}\n              placeholder={\n                placeholder === '' || placeholder\n                  ? placeholder\n                  : getPhoneNumberInputPlaceholder(language || 'en')\n              }\n              placeholderTextColor={\n                placeholderTextColor ||\n                (theme === 'dark' ? '#CCCCCC' : '#AAAAAA')\n              }\n              selectionColor={\n                selectionColor ||\n                (theme === 'dark'\n                  ? 'rgba(255,255,255, .4)'\n                  : 'rgba(0 ,0 ,0 , .4)')\n              }\n              editable={!disabled}\n              value={inputValue}\n              onChangeText={onChangeText}\n              keyboardType=\"numeric\"\n              ref={textInputRef}\n              {...rest}\n            />\n          </View>\n          {!disabled && !modalDisabled && show ? (\n            <CountryPicker\n              show={show}\n              lang={language}\n              inputPlaceholder={\n                modalSearchInputPlaceholder ||\n                getSearchInputPlaceholder(language || 'en')\n              }\n              inputPlaceholderTextColor={\n                modalSearchInputPlaceholderTextColor ||\n                (theme === 'dark' ? '#CCCCCC' : '#AAAAAA')\n              }\n              selectionColor={\n                modalSearchInputSelectionColor ||\n                (theme === 'dark'\n                  ? 'rgba(255,255,255, .4)'\n                  : 'rgba(0 ,0 ,0 , .4)')\n              }\n              searchMessage={\n                modalNotFoundCountryMessage ||\n                getCountryNotFoundMessage(language || 'en')\n              }\n              enableModalAvoiding\n              style={getCountryPickerStyle(\n                theme,\n                modalHeight,\n                modalStyles\n              )}\n              pickerButtonOnPress={onSelect}\n              onBackdropPress={() => setShow(false)}\n              showOnly={showOnly}\n              excludedCountries={excludedCountries}\n              popularCountries={popularCountries}\n              ListHeaderComponent={({ countries, lang, onPress }) => {\n                return countries.map((country, index) => {\n                  return (\n                    <CountryButton\n                      key={index}\n                      item={country}\n                      name={country?.name?.[lang || 'en']}\n                      onPress={() => onPress(country)}\n                      style={getCountryPickerStyle(\n                        theme,\n                        modalHeight,\n                        modalStyles\n                      )}\n                    />\n                  );\n                });\n              }}\n            />\n          ) : null}\n        </>\n      );\n    }\n  }\n);\n\nexport default PhoneInput;\n\nexport {\n  getAllCountries,\n  getCountryByPhoneNumber,\n  getCountryByCca2,\n  getCountriesByCallingCode,\n  getCountriesByName,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}