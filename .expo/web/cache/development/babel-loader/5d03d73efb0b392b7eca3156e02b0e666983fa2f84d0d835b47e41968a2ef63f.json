{"ast":null,"code":"import { getApp } from '@react-native-firebase/app';\nexport function getMessaging(app) {\n  if (app) {\n    return getApp(app.name).messaging();\n  }\n  return getApp().messaging();\n}\nexport function deleteToken(messaging, tokenOptions) {\n  if (tokenOptions != null) {\n    return messaging.deleteToken();\n  }\n  return messaging.deleteToken(tokenOptions);\n}\nexport function getToken(messaging, options) {\n  if (options != null) {\n    return messaging.getToken();\n  }\n  return messaging.getToken(options);\n}\nexport function onMessage(messaging, listener) {\n  return messaging.onMessage(listener);\n}\nexport function onNotificationOpenedApp(messaging, listener) {\n  return messaging.onNotificationOpenedApp(listener);\n}\nexport function onTokenRefresh(messaging, listener) {\n  return messaging.onTokenRefresh(listener);\n}\nexport function requestPermission(messaging, iosPermissions) {\n  return messaging.requestPermission(iosPermissions);\n}\nexport function isAutoInitEnabled(messaging) {\n  return messaging.isAutoInitEnabled;\n}\nexport function setAutoInitEnabled(messaging, enabled) {\n  return messaging.setAutoInitEnabled(enabled);\n}\nexport function getInitialNotification(messaging) {\n  return messaging.getInitialNotification();\n}\nexport function getDidOpenSettingsForNotification(messaging) {\n  return messaging.getDidOpenSettingsForNotification();\n}\nexport function getIsHeadless(messaging) {\n  return messaging.getIsHeadless();\n}\nexport function registerDeviceForRemoteMessages(messaging) {\n  return messaging.registerDeviceForRemoteMessages();\n}\nexport function isDeviceRegisteredForRemoteMessages(messaging) {\n  return messaging.isDeviceRegisteredForRemoteMessages;\n}\nexport function unregisterDeviceForRemoteMessages(messaging) {\n  return messaging.unregisterDeviceForRemoteMessages();\n}\nexport function getAPNSToken(messaging) {\n  return messaging.getAPNSToken();\n}\nexport function setAPNSToken(messaging, token, type) {\n  return messaging.setAPNSToken(token, type);\n}\nexport function hasPermission(messaging) {\n  return messaging.hasPermission();\n}\nexport function onDeletedMessages(messaging, listener) {\n  return messaging.onDeletedMessages(listener);\n}\nexport function onMessageSent(messaging, listener) {\n  return messaging.onMessageSent(listener);\n}\nexport function onSendError(messaging, listener) {\n  return messaging.onSendError(listener);\n}\nexport function setBackgroundMessageHandler(messaging, handler) {\n  return messaging.setBackgroundMessageHandler(handler);\n}\nexport function setOpenSettingsForNotificationsHandler(messaging, handler) {\n  return messaging.setOpenSettingsForNotificationsHandler(handler);\n}\nexport function sendMessage(messaging, message) {\n  return messaging.sendMessage(message);\n}\nexport function subscribeToTopic(messaging, topic) {\n  return messaging.subscribeToTopic(topic);\n}\nexport function unsubscribeFromTopic(messaging, topic) {\n  return messaging.unsubscribeFromTopic(topic);\n}\nexport function isDeliveryMetricsExportToBigQueryEnabled(messaging) {\n  return messaging.isDeliveryMetricsExportToBigQueryEnabled;\n}\nexport function isSupported(messaging) {\n  return messaging.isSupported();\n}\nexport function experimentalSetDeliveryMetricsExportedToBigQueryEnabled(messaging, enabled) {\n  return messaging.setDeliveryMetricsExportToBigQuery(enabled);\n}\nexport { AuthorizationStatus, NotificationAndroidPriority, NotificationAndroidVisibility } from \"../statics\";","map":{"version":3,"names":["getApp","getMessaging","app","name","messaging","deleteToken","tokenOptions","getToken","options","onMessage","listener","onNotificationOpenedApp","onTokenRefresh","requestPermission","iosPermissions","isAutoInitEnabled","setAutoInitEnabled","enabled","getInitialNotification","getDidOpenSettingsForNotification","getIsHeadless","registerDeviceForRemoteMessages","isDeviceRegisteredForRemoteMessages","unregisterDeviceForRemoteMessages","getAPNSToken","setAPNSToken","token","type","hasPermission","onDeletedMessages","onMessageSent","onSendError","setBackgroundMessageHandler","handler","setOpenSettingsForNotificationsHandler","sendMessage","message","subscribeToTopic","topic","unsubscribeFromTopic","isDeliveryMetricsExportToBigQueryEnabled","isSupported","experimentalSetDeliveryMetricsExportedToBigQueryEnabled","setDeliveryMetricsExportToBigQuery","AuthorizationStatus","NotificationAndroidPriority","NotificationAndroidVisibility"],"sources":["/home/micah/Documents/aia-staff-osen-main/node_modules/@react-native-firebase/messaging/lib/modular/index.js"],"sourcesContent":["import { getApp } from '@react-native-firebase/app';\n\n/**\n * @typedef {import('..').FirebaseMessagingTypes} FirebaseMessagingTypes\n * @typedef {import('..').FirebaseMessagingTypes.Module} Messaging\n * @typedef {import('..').FirebaseMessagingTypes.RemoteMessage} RemoteMessage\n * @typedef {import('..').FirebaseMessagingTypes.NativeTokenOptions} NativeTokenOptions\n * @typedef {import('..').FirebaseMessagingTypes.GetTokenOptions} GetTokenOptions\n * @typedef {import('..').FirebaseMessagingTypes.IOSPermissions} IOSPermissions\n * @typedef {import('..').FirebaseMessagingTypes.AuthorizationStatus} AuthorizationStatus\n * @typedef {import('..').FirebaseMessagingTypes.SendErrorEvent} SendErrorEvent\n * @typedef {import('@firebase/app').FirebaseApp} FirebaseApp\n */\n\n/**\n * Returns a Messaging instance for the given app.\n * @param {FirebaseApp} [app] - FirebaseApp. Optional.\n * @returns {Messaging}\n */\nexport function getMessaging(app) {\n  if (app) {\n    return getApp(app.name).messaging();\n  }\n\n  return getApp().messaging();\n}\n\n/**\n * Removes access to an FCM token previously authorized by its scope.\n * Messages sent by the server to this token will fail.\n * @param {Messaging} messaging - Messaging instance.\n * @param {NativeTokenOptions} [tokenOptions] - Options to override senderId (iOS) and projectId (Android).\n * @returns {Promise<void>}\n */\nexport function deleteToken(messaging, tokenOptions) {\n  if (tokenOptions != null) {\n    return messaging.deleteToken();\n  }\n\n  return messaging.deleteToken(tokenOptions);\n}\n\n/**\n * Returns an FCM token for this device. Optionally, you can specify custom options for your own use case.\n * @param {Messaging} messaging - Messaging instance.\n * @param {GetTokenOptions & NativeTokenOptions} [options] - Options to override senderId (iOS) and appName.\n * @returns {Promise<string>}\n */\nexport function getToken(messaging, options) {\n  if (options != null) {\n    return messaging.getToken();\n  }\n\n  return messaging.getToken(options);\n}\n\n/**\n * When any FCM payload is received, the listener callback is called with a `RemoteMessage`.\n * > This subscriber method is only called when the app is active (in the foreground).\n * @param {Messaging} messaging - Messaging instance.\n * @param {(message: RemoteMessage) => any} listener - Called with a `RemoteMessage` when a new FCM payload is received from the server.\n * @returns {() => void}\n */\nexport function onMessage(messaging, listener) {\n  return messaging.onMessage(listener);\n}\n\n/**\n * When the user presses a notification displayed via FCM, this listener will be called if the app\n * has opened from a background state.\n * @param {Messaging} messaging - Messaging instance.\n * @param {(message: RemoteMessage) => any} listener - Called with a `RemoteMessage` when a notification press opens the application.\n * @returns {() => void}\n */\nexport function onNotificationOpenedApp(messaging, listener) {\n  return messaging.onNotificationOpenedApp(listener);\n}\n\n/**\n * Called when a new registration token is generated for the device. For example, this event can happen when a\n * token expires or when the server invalidates the token.\n * > This subscriber method is only called when the app is active (in the foreground).\n * @param {Messaging} messaging - Messaging instance.\n * @param {(token: string) => any} listener - Called with a FCM token when the token is refreshed.\n * @returns {() => void}\n */\nexport function onTokenRefresh(messaging, listener) {\n  return messaging.onTokenRefresh(listener);\n}\n\n/**\n * On iOS, messaging permission must be requested by the current application before messages can\n * be received or sent.\n * @param {Messaging} messaging - Messaging instance.\n * @param {IOSPermissions} [iosPermissions] - All the available permissions for iOS that can be requested.\n * @returns {Promise<AuthorizationStatus>}\n */\nexport function requestPermission(messaging, iosPermissions) {\n  return messaging.requestPermission(iosPermissions);\n}\n\n/**\n * Returns whether messaging auto initialization is enabled or disabled for the device.\n * @param {Messaging} messaging - Messaging instance.\n * @returns {boolean}\n */\nexport function isAutoInitEnabled(messaging) {\n  return messaging.isAutoInitEnabled;\n}\n\n/**\n * Sets whether messaging auto initialization is enabled or disabled for the device.\n * @param {Messaging} messaging - Messaging instance.\n * @param {boolean} enabled - A boolean value to enable or disable auto initialization.\n * @returns {Promise<void>}\n */\nexport function setAutoInitEnabled(messaging, enabled) {\n  return messaging.setAutoInitEnabled(enabled);\n}\n\n/**\n * When a notification from FCM has triggered the application to open from a quit state,\n * this method will return a `RemoteMessage` containing the notification data, or `null` if\n * the app was opened via another method.\n * @param {Messaging} messaging - Messaging instance.\n * @returns {Promise<RemoteMessage | null>}\n */\nexport function getInitialNotification(messaging) {\n  return messaging.getInitialNotification();\n}\n\n/**\n * When the app is opened from iOS notifications settings from a quit state,\n * this method will return `true` or `false` if the app was opened via another method.\n * @param {Messaging} messaging - Messaging instance.\n * @returns {Promise<boolean>}\n */\nexport function getDidOpenSettingsForNotification(messaging) {\n  return messaging.getDidOpenSettingsForNotification();\n}\n\n/**\n * Returns whether the root view is headless or not\n * i.e true if the app was launched in the background (for example, by data-only cloud message)\n * @param {Messaging} messaging - Messaging instance.\n * @returns {Promise<boolean>}\n */\nexport function getIsHeadless(messaging) {\n  return messaging.getIsHeadless();\n}\n\n/**\n * On iOS, if your app wants to receive remote messages from FCM (via APNs), you must explicitly register\n * with APNs if auto-registration has been disabled.\n * @param {Messaging} messaging - Messaging instance.\n * @returns {Promise<void>}\n */\nexport function registerDeviceForRemoteMessages(messaging) {\n  return messaging.registerDeviceForRemoteMessages();\n}\n\n/**\n * Returns a boolean value whether the user has registered for remote notifications via\n * `registerDeviceForRemoteMessages()`. For iOS. Android always returns `true`.\n * @param {Messaging} messaging - Messaging instance.\n * @returns {boolean}\n */\nexport function isDeviceRegisteredForRemoteMessages(messaging) {\n  return messaging.isDeviceRegisteredForRemoteMessages;\n}\n\n/**\n * Unregisters the app from receiving remote notifications.\n * @param {Messaging} messaging - Messaging instance.\n * @returns {Promise<void>}\n */\nexport function unregisterDeviceForRemoteMessages(messaging) {\n  return messaging.unregisterDeviceForRemoteMessages();\n}\n\n/**\n * On iOS, it is possible to get the users APNs token. This may be required if you want to send messages to your\n * iOS devices without using the FCM service.\n * @param {Messaging} messaging - Messaging instance.\n * @returns {Promise<string | null>}\n */\nexport function getAPNSToken(messaging) {\n  return messaging.getAPNSToken();\n}\n\n/**\n * On iOS, This method is used to set the APNs Token received by the application delegate.\n * Note that the token is expected to be a hexadecimal string, as it is an NSData type in\n * the underlying native firebase SDK, and raw data may only be passed as a string if it is\n * hex encoded. Calling code is responsible for correct encoding, you should verify by comparing\n * the results of `getAPNSToken()` with your token parameter to make sure they are equivalent.\n *\n * Messaging uses method swizzling to ensure that the APNs token is set automatically.\n * However, if you have disabled swizzling by setting FirebaseAppDelegateProxyEnabled to NO\n * in your app’s Info.plist, you should manually set the APNs token in your application\n * delegate’s application(_:didRegisterForRemoteNotificationsWithDeviceToken:) method.\n *\n * If you would like to set the type of the APNs token, rather than relying on automatic\n * detection, provide a type of either 'prod', 'sandbox'. Omitting the type parameter\n * or specifying 'unknown' will rely on automatic type detection based on provisioning profile.\n *\n * At a native level you may also call objective-c `[FIRMessaging setAPNSToken];` as needed.\n *\n * @param {Messaging} messaging - Messaging instance.\n * @param {string} token - A hexadecimal string representing your APNs token.\n * @param {string} [type] - Optional. A string specifying 'prod', 'sandbox' or 'unknown' token type.\n * @returns {Promise<void>}\n */\nexport function setAPNSToken(messaging, token, type) {\n  return messaging.setAPNSToken(token, type);\n}\n\n/**\n * Returns a `AuthorizationStatus` as to whether the user has messaging permission for this app.\n * @param {Messaging} messaging - Messaging instance.\n * @returns {Promise<AuthorizationStatus>}\n */\nexport function hasPermission(messaging) {\n  return messaging.hasPermission();\n}\n\n/**\n * Called when the FCM server deletes pending messages.\n * @param {Messaging} messaging - Messaging instance.\n * @param {() => void} listener - Called when the FCM deletes pending messages.\n * @returns {() => void}\n */\nexport function onDeletedMessages(messaging, listener) {\n  return messaging.onDeletedMessages(listener);\n}\n\n/**\n * When sending a `RemoteMessage`, this listener is called when the message has been sent to FCM.\n * @param {Messaging} messaging - Messaging instance.\n * @param {(messageId: string) => any} listener - Called when the FCM sends the remote message to FCM.\n * @returns {() => void}\n */\nexport function onMessageSent(messaging, listener) {\n  return messaging.onMessageSent(listener);\n}\n\n/**\n * When sending a `RemoteMessage`, this listener is called when the message has been sent to FCM.\n * @param {Messaging} messaging - Messaging instance.\n * @param {(evt: SendErrorEvent) => any} listener - Called when the FCM sends the remote message to FCM.\n * @returns {() => void}\n */\nexport function onSendError(messaging, listener) {\n  return messaging.onSendError(listener);\n}\n\n/**\n * Set a message handler function which is called when the app is in the background\n * or terminated. In Android, a headless task is created, allowing you to access the React Native environment\n * to perform tasks such as updating local storage, or sending a network request.\n * @param {Messaging} messaging - Messaging instance.\n * @param {(message: RemoteMessage) => Promise<any>} handler - Called when a message is sent and the application is in a background or terminated state.\n * @returns {void}\n */\nexport function setBackgroundMessageHandler(messaging, handler) {\n  return messaging.setBackgroundMessageHandler(handler);\n}\n\n/**\n * Set a handler function which is called when the `${App Name} notifications settings`\n * link in iOS settings is clicked.\n * @param {Messaging} messaging - Messaging instance.\n * @param {(message: RemoteMessage) => any} handler - Called when link in iOS settings is clicked.\n * @returns {void}\n */\nexport function setOpenSettingsForNotificationsHandler(messaging, handler) {\n  return messaging.setOpenSettingsForNotificationsHandler(handler);\n}\n\n/**\n * Send a new `RemoteMessage` to the FCM server.\n * @param {Messaging} messaging - Messaging instance.\n * @param {RemoteMessage} message - A `RemoteMessage` interface.\n * @returns {Promise<void>}\n */\nexport function sendMessage(messaging, message) {\n  return messaging.sendMessage(message);\n}\n\n/**\n * Apps can subscribe to a topic, which allows the FCM server to send targeted messages to only those\n * devices subscribed to that topic.\n * @param {Messaging} messaging - Messaging instance.\n * @param {string} topic - The topic name.\n * @returns {Promise<void>}\n */\nexport function subscribeToTopic(messaging, topic) {\n  return messaging.subscribeToTopic(topic);\n}\n\n/**\n * Unsubscribe the device from a topic.\n * @param {Messaging} messaging - Messaging instance.\n * @param {string} topic - The topic name.\n * @returns {Promise<void>}\n */\nexport function unsubscribeFromTopic(messaging, topic) {\n  return messaging.unsubscribeFromTopic(topic);\n}\n\n/**\n * Returns a boolean whether message delivery metrics are exported to BigQuery.\n * @param {Messaging} messaging - Messaging instance.\n * @returns {boolean}\n */\nexport function isDeliveryMetricsExportToBigQueryEnabled(messaging) {\n  return messaging.isDeliveryMetricsExportToBigQueryEnabled;\n}\n\n/**\n * Checks if all required APIs exist in the browser.\n * @param {Messaging} messaging - Messaging instance.\n * @returns {boolean}\n */\nexport function isSupported(messaging) {\n  return messaging.isSupported();\n}\n\n/**\n * Sets whether message delivery metrics are exported to BigQuery is enabled or disabled.\n * The value is false by default. Set this to true to allow exporting of message delivery metrics to BigQuery.\n * @param {Messaging} messaging - Messaging instance.\n * @param {boolean} enabled - A boolean value to enable or disable exporting of message delivery metrics to BigQuery.\n * @returns {Promise<void>}\n */\nexport function experimentalSetDeliveryMetricsExportedToBigQueryEnabled(messaging, enabled) {\n  return messaging.setDeliveryMetricsExportToBigQuery(enabled);\n}\n\nexport {\n  AuthorizationStatus,\n  NotificationAndroidPriority,\n  NotificationAndroidVisibility,\n} from '../statics';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}