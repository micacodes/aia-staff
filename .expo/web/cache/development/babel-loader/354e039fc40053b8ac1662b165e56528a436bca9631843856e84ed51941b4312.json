{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as Notifications from \"expo-notifications\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar notificationIcon = require(\"../assets/icon.png\");\nvar NOTIFICATION_CHANNELS = Object.freeze({\n  default: {\n    name: \"Default Channel\",\n    description: \"Default notification channels for all notifications\"\n  }\n});\nexport var NotificationChannels = {\n  get: function get(id) {\n    if (id in NOTIFICATION_CHANNELS) {\n      return id;\n    }\n    if (__DEV__) {\n      throw new Error(\"The specified notification channel is invalid\");\n    }\n    return Object.keys(NOTIFICATION_CHANNELS)[0];\n  }\n};\nexport var createNotificationChannels = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var channels = Object.entries(NOTIFICATION_CHANNELS).map(function () {\n      var _ref3 = _asyncToGenerator(function* (_ref2) {\n        var _ref4 = _slicedToArray(_ref2, 2),\n          id = _ref4[0],\n          _ref4$ = _ref4[1],\n          description = _ref4$.description,\n          name = _ref4$.name;\n        yield Notifications.setNotificationChannelAsync(id, {\n          name: name,\n          description: description,\n          importance: Notifications.AndroidImportance.DEFAULT,\n          lightColor: \"#FF231F7C\",\n          vibrationPattern: [0, 250, 250, 250],\n          showBadge: true\n        });\n      });\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    yield Promise.all(channels);\n  });\n  return function createNotificationChannels() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var displayNotification = function () {\n  var _ref5 = _asyncToGenerator(function* (data) {\n    var channel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var channelId = NotificationChannels.get(channel != null ? channel : \"default\");\n    yield Notifications.scheduleNotificationAsync({\n      content: _objectSpread({\n        title: data.title,\n        body: data.body\n      }, Platform.OS === \"android\" ? {\n        android: {\n          channelId: channelId\n        }\n      } : {\n        ios: {\n          sound: true,\n          _displayInForeground: true\n        }\n      }),\n      trigger: null\n    });\n  });\n  return function displayNotification(_x2) {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["Notifications","Platform","notificationIcon","require","NOTIFICATION_CHANNELS","Object","freeze","default","name","description","NotificationChannels","get","id","__DEV__","Error","keys","createNotificationChannels","_ref","_asyncToGenerator","channels","entries","map","_ref3","_ref2","_ref4","_slicedToArray","_ref4$","setNotificationChannelAsync","importance","AndroidImportance","DEFAULT","lightColor","vibrationPattern","showBadge","_x","apply","arguments","Promise","all","displayNotification","_ref5","data","channel","length","undefined","channelId","scheduleNotificationAsync","content","_objectSpread","title","body","OS","android","ios","sound","_displayInForeground","trigger","_x2"],"sources":["/home/micah/Documents/aia-staff-osen-main/utils/notifee.ts"],"sourcesContent":["// import notifee, {\n//   AndroidImportance,\n//   Notification,\n// } from \"@notifee/react-native\";\nimport * as Notifications from \"expo-notifications\";\nimport { Platform } from \"react-native\";\n\nconst notificationIcon = require(\"../assets/icon.png\");\n\nconst NOTIFICATION_CHANNELS = Object.freeze({\n  default: {\n    name: \"Default Channel\",\n    description: \"Default notification channels for all notifications\",\n  },\n} as const);\n\nexport const NotificationChannels = {\n  get<T extends keyof typeof NOTIFICATION_CHANNELS>(id: T) {\n    if (id in NOTIFICATION_CHANNELS) {\n      return id;\n    }\n\n    if (__DEV__) {\n      throw new Error(\"The specified notification channel is invalid\");\n    }\n\n    return Object.keys(NOTIFICATION_CHANNELS)[0];\n  },\n};\n\nexport const createNotificationChannels = async () => {\n  const channels = Object.entries(NOTIFICATION_CHANNELS).map(\n    async ([id, { description, name }]) => {\n      await Notifications.setNotificationChannelAsync(id, {\n        name,\n        description,\n        importance: Notifications.AndroidImportance.DEFAULT,\n        lightColor: \"#FF231F7C\",\n        vibrationPattern: [0, 250, 250, 250],\n        showBadge: true,\n      });\n    }\n  );\n\n  await Promise.all(channels);\n};\n\nexport const displayNotification = async <\n  C extends keyof typeof NOTIFICATION_CHANNELS | null\n>(\n  data: Omit<Notifications.NotificationContentInput, \"android\" | \"ios\">,\n  channel: C = null\n) => {\n  const channelId = NotificationChannels.get(channel ?? \"default\");\n\n  await Notifications.scheduleNotificationAsync({\n    content: {\n      title: data.title,\n      body: data.body,\n      ...(Platform.OS === \"android\"\n        ? {\n            android: {\n              channelId,\n            },\n          }\n        : {\n            ios: {\n              sound: true,\n              _displayInForeground: true,\n            },\n          }),\n    },\n    trigger: null,\n  });\n};\n"],"mappings":";;;;;AAIA,OAAO,KAAKA,aAAa,MAAM,oBAAoB;AAAC,OAAAC,QAAA;AAGpD,IAAMC,gBAAgB,GAAGC,OAAO,qBAAqB,CAAC;AAEtD,IAAMC,qBAAqB,GAAGC,MAAM,CAACC,MAAM,CAAC;EAC1CC,OAAO,EAAE;IACPC,IAAI,EAAE,iBAAiB;IACvBC,WAAW,EAAE;EACf;AACF,CAAU,CAAC;AAEX,OAAO,IAAMC,oBAAoB,GAAG;EAClCC,GAAG,WAAAA,IAA+CC,EAAK,EAAE;IACvD,IAAIA,EAAE,IAAIR,qBAAqB,EAAE;MAC/B,OAAOQ,EAAE;IACX;IAEA,IAAIC,OAAO,EAAE;MACX,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;IAClE;IAEA,OAAOT,MAAM,CAACU,IAAI,CAACX,qBAAqB,CAAC,CAAC,CAAC,CAAC;EAC9C;AACF,CAAC;AAED,OAAO,IAAMY,0BAA0B;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;IACpD,IAAMC,QAAQ,GAAGd,MAAM,CAACe,OAAO,CAAChB,qBAAqB,CAAC,CAACiB,GAAG;MAAA,IAAAC,KAAA,GAAAJ,iBAAA,CACxD,WAAAK,KAAA,EAAuC;QAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,KAAA;UAA/BX,EAAE,GAAAY,KAAA;UAAAE,MAAA,GAAAF,KAAA;UAAIf,WAAW,GAAAiB,MAAA,CAAXjB,WAAW;UAAED,IAAI,GAAAkB,MAAA,CAAJlB,IAAI;QAC7B,MAAMR,aAAa,CAAC2B,2BAA2B,CAACf,EAAE,EAAE;UAClDJ,IAAI,EAAJA,IAAI;UACJC,WAAW,EAAXA,WAAW;UACXmB,UAAU,EAAE5B,aAAa,CAAC6B,iBAAiB,CAACC,OAAO;UACnDC,UAAU,EAAE,WAAW;UACvBC,gBAAgB,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;UACpCC,SAAS,EAAE;QACb,CAAC,CAAC;MACJ,CAAC;MAAA,iBAAAC,EAAA;QAAA,OAAAZ,KAAA,CAAAa,KAAA,OAAAC,SAAA;MAAA;IAAA,GACH,CAAC;IAED,MAAMC,OAAO,CAACC,GAAG,CAACnB,QAAQ,CAAC;EAC7B,CAAC;EAAA,gBAfYH,0BAA0BA,CAAA;IAAA,OAAAC,IAAA,CAAAkB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAetC;AAED,OAAO,IAAMG,mBAAmB;EAAA,IAAAC,KAAA,GAAAtB,iBAAA,CAAG,WAGjCuB,IAAqE,EAElE;IAAA,IADHC,OAAU,GAAAN,SAAA,CAAAO,MAAA,QAAAP,SAAA,QAAAQ,SAAA,GAAAR,SAAA,MAAG,IAAI;IAEjB,IAAMS,SAAS,GAAGnC,oBAAoB,CAACC,GAAG,CAAC+B,OAAO,WAAPA,OAAO,GAAI,SAAS,CAAC;IAEhE,MAAM1C,aAAa,CAAC8C,yBAAyB,CAAC;MAC5CC,OAAO,EAAAC,aAAA;QACLC,KAAK,EAAER,IAAI,CAACQ,KAAK;QACjBC,IAAI,EAAET,IAAI,CAACS;MAAI,GACXjD,QAAQ,CAACkD,EAAE,KAAK,SAAS,GACzB;QACEC,OAAO,EAAE;UACPP,SAAS,EAATA;QACF;MACF,CAAC,GACD;QACEQ,GAAG,EAAE;UACHC,KAAK,EAAE,IAAI;UACXC,oBAAoB,EAAE;QACxB;MACF,CAAC,CACN;MACDC,OAAO,EAAE;IACX,CAAC,CAAC;EACJ,CAAC;EAAA,gBA3BYjB,mBAAmBA,CAAAkB,GAAA;IAAA,OAAAjB,KAAA,CAAAL,KAAA,OAAAC,SAAA;EAAA;AAAA,GA2B/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}